name: Build, Push and Deploy Docker Image

on:
  push:
    tags:
      - 'v*'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_NAME: zutom
  DOCKER_IMAGE: thebatteur/zutom
  CONTAINER_NAME: zutom-container

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      docker_version: ${{ steps.extract_version.outputs.version }}
    steps:

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract version
        id: extract_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}  # Supprime le 'v' initial si prÃ©sent
          else
            VERSION="latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "DOCKER_VERSION=$VERSION" >> $GITHUB_ENV

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    steps:
      # Check if Docker is installed and install it if not
      # TODO: Look for a full deployment on a fresh server as a final goal
      # (Maybe including Apache/Nginx or HAProxy config)
      - name: Connect to server and setup Docker
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.REMOTE_SERVER_ADDRESS }}
          username: ${{ secrets.REMOTE_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."

              sudo apt-get update -qq
              sudo apt-get upgrade -y -qq

              sudo apt-get install -y -qq \
                ca-certificates \
                curl \
                gnupg \
                lsb-release \
                apt-transport-https \
                software-properties-common

              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg

              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -qq

              sudo apt-get install -y -qq \
                docker-ce \
                docker-ce-cli \
                containerd.io \
                docker-buildx-plugin \
                docker-compose-plugin

              sudo systemctl start docker
              sudo systemctl enable docker

              sudo usermod -aG docker $USER
              newgrp docker
              echo "Installed docker"
            else
              echo "Docker already installed"
            fi

            docker --version


      - name: Deploy container
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.REMOTE_SERVER_ADDRESS }}
          username: ${{ secrets.REMOTE_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            VERSION=${{ needs.build-and-push.outputs.docker_version }}
            echo "Deploying version $VERSION..."

            # Pull the new image
            docker pull ${{ env.DOCKER_IMAGE }}:$VERSION
            docker pull ${{ env.DOCKER_IMAGE }}:latest

            # Stop & del the old container
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true

            # Start the new container
            docker run -d --name ${{ env.CONTAINER_NAME }} -p 80:80 ${{ env.DOCKER_IMAGE }}:$VERSION

            echo "Container started."
            exit 0

      - name: Cleanup old images
        if: success()
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.REMOTE_SERVER_ADDRESS }}
          username: ${{ secrets.REMOTE_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Clean old unused images for more than 7d (168h)
            docker image prune -a --force --filter "until=168h"

            # Only keep last 5 images
            docker images --format '{{.Repository}}:{{.Tag}}' | grep '${{ env.DOCKER_IMAGE }}:v' | sort -V | head -n -5 | xargs -r docker rmi
